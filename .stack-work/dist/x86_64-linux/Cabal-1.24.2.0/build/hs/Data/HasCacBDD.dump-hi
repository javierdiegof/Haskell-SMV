
==================== FINAL INTERFACE ====================
2018-07-11 21:06:55.864075 UTC

interface HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ:Data.HasCacBDD 8002
  interface hash: b58528aa5ee7794bdd6aeb464ee507e2
  ABI hash: 4781fbbf6dc196d7b8aaac1e053750d2
  export-list hash: cace8b9921bfbb660425a98c929e0488
  orphan hash: 2811b95db2d7e15429acd19689c6c2e6
  flag hash: 2ea2a23a835c320652682e872141feea
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.HasCacBDD.allSats
  Data.HasCacBDD.allSatsWith
  Data.HasCacBDD.allVarsOf
  Data.HasCacBDD.allVarsOfSorted
  Data.HasCacBDD.anySat
  Data.HasCacBDD.anySatWith
  Data.HasCacBDD.bot
  Data.HasCacBDD.con
  Data.HasCacBDD.conSet
  Data.HasCacBDD.dis
  Data.HasCacBDD.disSet
  Data.HasCacBDD.elseOf
  Data.HasCacBDD.equ
  Data.HasCacBDD.evaluate
  Data.HasCacBDD.evaluateFun
  Data.HasCacBDD.exists
  Data.HasCacBDD.existsSet
  Data.HasCacBDD.firstVarOf
  Data.HasCacBDD.forall
  Data.HasCacBDD.forallSet
  Data.HasCacBDD.gfp
  Data.HasCacBDD.ifthenelse
  Data.HasCacBDD.imp
  Data.HasCacBDD.maxVarOf
  Data.HasCacBDD.maximumvar
  Data.HasCacBDD.neg
  Data.HasCacBDD.ravel
  Data.HasCacBDD.relabel
  Data.HasCacBDD.restrict
  Data.HasCacBDD.restrictLaw
  Data.HasCacBDD.restrictSet
  Data.HasCacBDD.satCountWith
  Data.HasCacBDD.showInfo
  Data.HasCacBDD.sizeOf
  Data.HasCacBDD.subsOf
  Data.HasCacBDD.thenOf
  Data.HasCacBDD.top
  Data.HasCacBDD.unravel
  Data.HasCacBDD.var
  Data.HasCacBDD.xor
  Data.HasCacBDD.xorSet
  Data.HasCacBDD.Assignment
  Data.HasCacBDD.Bdd
  Data.HasCacBDD.BddTree{Data.HasCacBDD.Bot Data.HasCacBDD.Top Data.HasCacBDD.Var}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck 5d7cb5b36e5406469ab226c41cc67877
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Arbitrary 23d5e13e5df273f2d4aff38bd8911bef
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Gen fa9fa30ba543355933bd6081ce57f80f
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Foreign b4bee334aade4f33021057fdecf4a495
import  -/  base-4.9.1.0:Foreign.C b8d6c8cd5e89ba05da67379943abaffb
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:Foreign.ForeignPtr.Imp 983e41bceaf3a479584f5f15468ec17c
import  -/  base-4.9.1.0:Foreign.Marshal.Alloc 702eda1ba8e8a26a0aa78866f5adb5ab
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
7882cf437949339fe7d814b40ff592fb
  $fArbitraryBdd ::
    Test.QuickCheck.Arbitrary.Arbitrary Data.HasCacBDD.Bdd
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.HasCacBDD.Bdd
                  Data.HasCacBDD.$fArbitraryBdd_$carbitrary
                  Data.HasCacBDD.$fArbitraryBdd_$cshrink -}
7882cf437949339fe7d814b40ff592fb
  $fArbitraryBdd1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,U><S(S),U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Data.HasCacBDD.randombdd n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Data.HasCacBDD.Bdd>_R)
                   r
                   n) -}
7882cf437949339fe7d814b40ff592fb
  $fArbitraryBdd_$carbitrary ::
    Test.QuickCheck.Gen.Gen Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,U><S(S),U(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.HasCacBDD.$fArbitraryBdd1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Data.HasCacBDD.Bdd>_R)) -}
7882cf437949339fe7d814b40ff592fb
  $fArbitraryBdd_$cshrink ::
    Data.HasCacBDD.Bdd -> [Data.HasCacBDD.Bdd]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Data.HasCacBDD.Bdd) ->
                 GHC.Types.[] @ Data.HasCacBDD.Bdd) -}
7882cf437949339fe7d814b40ff592fb
  $fEqBdd :: GHC.Classes.Eq Data.HasCacBDD.Bdd
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.HasCacBDD.Bdd
                  Data.HasCacBDD.$fEqBdd_$c==
                  Data.HasCacBDD.$fEqBdd_$c/= -}
7882cf437949339fe7d814b40ff592fb
  $fEqBdd_$c/= ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.HasCacBDD.Bdd) (y :: Data.HasCacBDD.Bdd) ->
                 GHC.Classes.not (Data.HasCacBDD.$fEqBdd_$c== x y)) -}
7882cf437949339fe7d814b40ff592fb
  $fEqBdd_$c== ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Data.HasCacBDD.same -}
7882cf437949339fe7d814b40ff592fb
  $fShowBdd :: GHC.Show.Show Data.HasCacBDD.Bdd
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.HasCacBDD.Bdd
                  Data.HasCacBDD.$fShowBdd_$cshowsPrec1
                  Data.HasCacBDD.$fShowBdd_$cshow
                  Data.HasCacBDD.$fShowBdd_$cshowList -}
81e24265408798f7c6cbc7c73c7fd843
  $fShowBddTree :: GHC.Show.Show Data.HasCacBDD.BddTree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.HasCacBDD.BddTree
                  Data.HasCacBDD.$fShowBdd_$cshowsPrec
                  Data.HasCacBDD.$fShowBddTree_$cshow
                  Data.HasCacBDD.$fShowBddTree_$cshowList -}
81e24265408798f7c6cbc7c73c7fd843
  $fShowBddTree1 :: Data.HasCacBDD.BddTree -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.HasCacBDD.$fShowBdd_$cshowsPrec
                   Data.HasCacBDD.$fShowBddTree2) -}
095cdd94474fdf861b5f2d208d4abde7
  $fShowBddTree2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
81e24265408798f7c6cbc7c73c7fd843
  $fShowBddTree_$cshow :: Data.HasCacBDD.BddTree -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HasCacBDD.BddTree) ->
                 Data.HasCacBDD.$fShowBdd_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
81e24265408798f7c6cbc7c73c7fd843
  $fShowBddTree_$cshowList ::
    [Data.HasCacBDD.BddTree] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Show.showList__
                   @ Data.HasCacBDD.BddTree
                   Data.HasCacBDD.$fShowBddTree1) -}
7882cf437949339fe7d814b40ff592fb
  $fShowBdd_$cshow :: Data.HasCacBDD.Bdd -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: Data.HasCacBDD.Bdd) ->
                 Data.HasCacBDD.$fShowBdd_$cshowsPrec
                   GHC.Show.shows22
                   (Data.HasCacBDD.unravel b)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7882cf437949339fe7d814b40ff592fb
  $fShowBdd_$cshowList :: [Data.HasCacBDD.Bdd] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Data.HasCacBDD.Bdd])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Data.HasCacBDD.Bdd
                   (\ (x :: Data.HasCacBDD.Bdd) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Data.HasCacBDD.$fShowBdd_$cshowsPrec
                         GHC.Show.shows22
                         (Data.HasCacBDD.unravel x)
                         (GHC.Types.[] @ GHC.Types.Char))
                      s1)
                   ls
                   s) -}
81e24265408798f7c6cbc7c73c7fd843
  $fShowBdd_$cshowsPrec ::
    GHC.Types.Int -> Data.HasCacBDD.BddTree -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
7882cf437949339fe7d814b40ff592fb
  $fShowBdd_$cshowsPrec1 ::
    GHC.Types.Int -> Data.HasCacBDD.Bdd -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,U(U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Data.HasCacBDD.Bdd)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.HasCacBDD.$fShowBdd_$cshowsPrec
                         GHC.Show.shows22
                         (Data.HasCacBDD.unravel x)
                         (GHC.Types.[] @ GHC.Types.Char)))
                   s) -}
e7510c56d973d26d71daeb45e31ac118
  $s$fOrdMaybe_$s$fOrdMaybe_$cmax ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.Maybe GHC.Types.Int)
                   (y :: GHC.Base.Maybe GHC.Types.Int) ->
                 case x of wild {
                   GHC.Base.Nothing -> y
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> wild
                        GHC.Base.Just b1
                        -> case GHC.Classes.leInt a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
9bc04ba312817f121614f7364bdeaa7e
  $tc'Bdd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13000958296043464461##
                   12680998404146735169##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tc'Bdd1) -}
760cdb2faf1d6c13f9e5634b5b6463b3
  $tc'Bdd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bdd"#) -}
b43b06688878ba29761f7a5471415fb9
  $tc'Bot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12783947253882595454##
                   8960203244178173654##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tc'Bot1) -}
5bc5cc4fba8e37f671df9f177f06fb43
  $tc'Bot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bot"#) -}
5d8c37cb3d4636064916438c96d4210f
  $tc'Top :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17216731345476919504##
                   15421913549730064135##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tc'Top1) -}
459e9798ff0a652af5aa6a6fc47beed8
  $tc'Top1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Top"#) -}
f1c00fba76fa3c7318f8b827f8312451
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16078116877114921285##
                   12121651645761684140##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tc'Var1) -}
e5f0f592a0cf7c81d8b2223fef6e36c6
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
12dd0bfbcbe8be0282a44dc75545d05f
  $tc'XBddManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   610242974644507718##
                   10683876733945898011##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tc'XBddManager1) -}
0959451ec3f28096ff428539cddfe4e7
  $tc'XBddManager1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XBddManager"#) -}
990339b49b93256c08a3df14aeec846f
  $tcBdd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16280450437631471239##
                   8356269910955662626##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tcBdd1) -}
03b54745790a2a50e8f2c7ee3dca4ddb
  $tcBdd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bdd"#) -}
c905417044365453f248da5bdaf8ae29
  $tcBddTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10769134891899504937##
                   13320991431365235557##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tcBddTree1) -}
980b189a12af3bfa5040888d208b696e
  $tcBddTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BddTree"#) -}
d2780f8fbac7752c8ca764073d62650b
  $tcXBddManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4556969972823898545##
                   13059218667208704826##
                   Data.HasCacBDD.$trModule
                   Data.HasCacBDD.$tcXBddManager1) -}
232800f30521c63e7a704d8f6a2e3f43
  $tcXBddManager1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XBddManager"#) -}
4d7b4d8c151aa8246a420ffc731face2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.HasCacBDD.$trModule2
                   Data.HasCacBDD.$trModule1) -}
ca9120766d57c578810aabf29d2d3e69
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.HasCacBDD"#) -}
377ab239c33b76f960c30581d46ceed0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ"#) -}
7882cf437949339fe7d814b40ff592fb
  $wrandombdd ::
    GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
965fb3d65fff671bebdd43ee14fa292c
  $wsatCountWith ::
    [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,U><L,U(U,U)>, Inline: [0] -}
8d3f1897fd31e4e3958bcc847b59e334
  type Assignment = [(GHC.Types.Int, GHC.Types.Bool)]
7882cf437949339fe7d814b40ff592fb
  newtype Bdd = Bdd (GHC.ForeignPtr.ForeignPtr Data.HasCacBDD.CacBDD)
81e24265408798f7c6cbc7c73c7fd843
  data BddTree
    = Bot
    | Top
    | Var GHC.Types.Int Data.HasCacBDD.BddTree Data.HasCacBDD.BddTree
8fe00d62d2acfa6b1127af90c395b1fe
  type BinaryOp =
    GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Types.IO (GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
51d7c4d17ce27c4fe3a202084d674ef0
  type CacBDD = ()
48d0d40dd5a7a5f23d28a956606c5b53
  type CacXBddManager = ()
b9e14ea4e968ef4717fcb14bcd6865d2
  type NullOp =
    GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Ptr.Ptr Data.HasCacBDD.CacXBddManager
    -> GHC.Types.IO (GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
e217596cb02bc4010456397940dc0d36
  type UnaryOp =
    GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Types.IO (GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
88ff0d974a0696aa4b8973767b7ad812
  newtype XBddManager
    = XBddManager (GHC.ForeignPtr.ForeignPtr
                     Data.HasCacBDD.CacXBddManager)
27ee2ebbd2845f2ec120efb11731dfd5
  allSats :: Data.HasCacBDD.Bdd -> [Data.HasCacBDD.Assignment]
  {- Arity: 1, Strictness: <L,U(U,U)> -}
588f63e9d7fbd2a29bcc8720a9fa97e9
  allSatsWith ::
    [GHC.Types.Int]
    -> Data.HasCacBDD.Bdd -> [Data.HasCacBDD.Assignment]
  {- Arity: 2, Strictness: <L,U><L,U(U,U)>,
     Unfolding: (\ (allvars :: [GHC.Types.Int])
                   (b :: Data.HasCacBDD.Bdd) ->
                 letrec {
                   go :: [Data.HasCacBDD.Assignment] -> [Data.HasCacBDD.Assignment]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.HasCacBDD.Assignment]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Data.HasCacBDD.Assignment
                       : y ys
                       -> GHC.Base.++
                            @ [(GHC.Types.Int, GHC.Types.Bool)]
                            (Data.HasCacBDD.completeAss allvars y)
                            (go ys) }
                 } in
                 go (Data.HasCacBDD.allSats b)) -}
5ac7d9bcf878582ef6517e9ccf0c0f7a
  allVarsOf :: Data.HasCacBDD.Bdd -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U(U,U)> -}
469b355088736c19567e7407cd95c04f
  allVarsOfSorted :: Data.HasCacBDD.Bdd -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HasCacBDD.Bdd) ->
                 Data.OldList.sortBy
                   @ GHC.Types.Int
                   GHC.Classes.compareInt
                   (Data.HasCacBDD.allVarsOf x)) -}
605d2029dffb63ad6f58129596062248
  anySat ::
    Data.HasCacBDD.Bdd -> GHC.Base.Maybe Data.HasCacBDD.Assignment
  {- Arity: 1, Strictness: <L,U(U,U)> -}
308a2a637a7d0d3549268059b25fe1b8
  anySatWith ::
    [GHC.Types.Int]
    -> Data.HasCacBDD.Bdd -> GHC.Base.Maybe Data.HasCacBDD.Assignment
  {- Arity: 2, Strictness: <L,U><L,U(U,U)>,
     Unfolding: (\ (allvars :: [GHC.Types.Int])
                   (b :: Data.HasCacBDD.Bdd) ->
                 case Data.HasCacBDD.anySat b of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Data.HasCacBDD.Assignment
                   GHC.Base.Just partass
                   -> GHC.Base.Just
                        @ Data.HasCacBDD.Assignment
                        (case Data.HasCacBDD.completeAss allvars partass of wild1 {
                           [] -> GHC.List.badHead @ Data.HasCacBDD.Assignment
                           : x ds1 -> x }) }) -}
a26bce66ebf355912b524e35a240f2e2
  bdd_Else :: Data.HasCacBDD.UnaryOp
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
                   (ds1 :: GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ BDD_Else GHC.Prim.Addr#
                                                                                     -> GHC.Prim.Addr#
                                                                                     -> GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        eta of wild { (#,#) ds6 ds7 ->
                 (# ds6, GHC.Ptr.Ptr @ Data.HasCacBDD.CacBDD ds7 #) } } })
                  `cast`
                (<GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R
                 ->_R <GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R)) -}
71db75672abcbe4dc9a6c2c0ed1d27b8
  bdd_Then :: Data.HasCacBDD.UnaryOp
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
                   (ds1 :: GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds2 { GHC.Ptr.Ptr ds3 ->
                 case ds1 of ds4 { GHC.Ptr.Ptr ds5 ->
                 case {__pkg_ccall HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ BDD_Then GHC.Prim.Addr#
                                                                                     -> GHC.Prim.Addr#
                                                                                     -> GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                     -> (# GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld,
                                                                                           GHC.Prim.Addr# #)}
                        ds3
                        ds5
                        eta of wild { (#,#) ds6 ds7 ->
                 (# ds6, GHC.Ptr.Ptr @ Data.HasCacBDD.CacBDD ds7 #) } } })
                  `cast`
                (<GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R
                 ->_R <GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R)) -}
9dc7b2d1e20aca12955dd1a2ec2050d2
  bdd_Variable ::
    GHC.Ptr.Ptr Data.HasCacBDD.CacBDD
    -> GHC.Types.IO Foreign.C.Types.CInt
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Ptr.Ptr Data.HasCacBDD.CacBDD)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of ds1 { GHC.Ptr.Ptr ds2 ->
                 case {__pkg_ccall HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ BDD_Variable GHC.Prim.Addr#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               GHC.Prim.Int# #)}
                        ds2
                        eta of wild { (#,#) ds3 ds4 ->
                 (# ds3, GHC.Int.I32# (GHC.Prim.narrow32Int# ds4) #) } })
                  `cast`
                (<GHC.Ptr.Ptr Data.HasCacBDD.CacBDD>_R
                 ->_R Sym (GHC.Types.N:IO[0] (Foreign.C.Types.N:CInt[0]))) -}
a43ade0e7a3d89b19c334ad35e20a45a
  bot :: Data.HasCacBDD.Bdd
  {- Inline: NOINLINE -}
ac667a843951d5892641880c1e52dafa
  completeAss ::
    [GHC.Types.Int]
    -> Data.HasCacBDD.Assignment -> [Data.HasCacBDD.Assignment]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
f1177574fc28d9582928af434823d8e6
  con ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Inline: NOINLINE -}
bd9a9d044e13327a21fe3b45cbf0bec9
  conSet :: [Data.HasCacBDD.Bdd] -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S,1*U>, Inline: NOINLINE -}
99f8383531de46107407c150134b0f19
  dis ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Inline: NOINLINE -}
80c29ec3606c3c8bf64efde9254e6537
  disSet :: [Data.HasCacBDD.Bdd] -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S,1*U>, Inline: NOINLINE -}
a70bdd3f0b898a8225134a070c2e2234
  elseOf :: Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 1,
     Unfolding: (Data.HasCacBDD.withBDD Data.HasCacBDD.bdd_Else) -}
e1f6e7c556a4952c9d60eb3fc98f7250
  equ ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: NOINLINE -}
f7d7fe2e9893dc076e35d63d7933b5b5
  evaluate ::
    Data.HasCacBDD.Bdd
    -> Data.HasCacBDD.Assignment -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U,U)><L,U>,
     Unfolding: (\ (b :: Data.HasCacBDD.Bdd)
                   (ass :: Data.HasCacBDD.Assignment) ->
                 let {
                   ds :: [GHC.Types.Int]
                   = GHC.Base.map
                       @ (GHC.Types.Int, GHC.Types.Bool)
                       @ GHC.Types.Int
                       (Data.Tuple.fst @ GHC.Types.Int @ GHC.Types.Bool)
                       ass
                 } in
                 letrec {
                   go :: [GHC.Types.Int] -> Data.Monoid.All
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [GHC.Types.Int]) ->
                     case ds1 of wild {
                       [] -> GHC.Types.True `cast` (Sym (Data.Monoid.N:All[0]))
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Int
                                 GHC.Classes.$fEqInt
                                 y
                                 ds of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Monoid.N:All[0]))
                            GHC.Types.True -> go ys } }
                 } in
                 case (go (Data.HasCacBDD.allVarsOf b))
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Bool
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ GHC.Types.Bool
                        (Data.HasCacBDD.same
                           Data.HasCacBDD.top
                           (Data.HasCacBDD.restrictSet b ass)) }) -}
6c39cc9c3b6f1270034367d82c41466f
  evaluateFun ::
    Data.HasCacBDD.Bdd
    -> (GHC.Types.Int -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U,U)><L,C(U)> -}
86ff016343af398d3fb216177b558415
  exists :: GHC.Types.Int -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U,U)>, Inline: NOINLINE -}
cbbfe7181c3a18051cbdb8aadf6c818d
  existsSet ::
    [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U)>,
     Unfolding: (\ (ns :: [GHC.Types.Int]) (b :: Data.HasCacBDD.Bdd) ->
                 letrec {
                   go :: [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
                     {- Arity: 2, Strictness: <S,1*U><L,U(U,U)> -}
                   = \ (ds :: [GHC.Types.Int]) (eta :: Data.HasCacBDD.Bdd) ->
                     case ds of wild {
                       [] -> eta : y ys -> go ys (Data.HasCacBDD.exists y eta) }
                 } in
                 go ns b) -}
adee9a4d6677e3e1bf58c386bc9995fc
  firstVarOf :: Data.HasCacBDD.Bdd -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (b :: Data.HasCacBDD.Bdd) ->
                 case Data.HasCacBDD.same b Data.HasCacBDD.bot of wild {
                   GHC.Types.False
                   -> case Data.HasCacBDD.same b Data.HasCacBDD.top of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ GHC.Types.Int
                             (case (Data.HasCacBDD.fromBDD
                                      @ Foreign.C.Types.CInt
                                      Data.HasCacBDD.bdd_Variable
                                      b)
                                     `cast`
                                   (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                              GHC.Types.I# (GHC.Prim.-# x# 1#) })
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int }) -}
7436e6e9c488f001d25dd67a5c293860
  forall :: GHC.Types.Int -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U,U)>, Inline: NOINLINE -}
32d9cdabe5e5b2eeb12a2014a7f648a6
  forallSet ::
    [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U)>,
     Unfolding: (\ (ns :: [GHC.Types.Int]) (b :: Data.HasCacBDD.Bdd) ->
                 letrec {
                   go :: [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
                     {- Arity: 2, Strictness: <S,1*U><L,U(U,U)> -}
                   = \ (ds :: [GHC.Types.Int]) (eta :: Data.HasCacBDD.Bdd) ->
                     case ds of wild {
                       [] -> eta : y ys -> go ys (Data.HasCacBDD.forall y eta) }
                 } in
                 go ns b) -}
b98999617bede782477622244588e51e
  fromBDD ::
    (GHC.Ptr.Ptr Data.HasCacBDD.CacBDD -> GHC.Types.IO a)
    -> Data.HasCacBDD.Bdd -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,U(U,U)>,
     Inline: NOINLINE -}
4de9c995bb108a53db8480f0433cb7e6
  gfp ::
    (Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd) -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <L,C(U(U,U))>,
     Unfolding: (\ (operator :: Data.HasCacBDD.Bdd
                                -> Data.HasCacBDD.Bdd) ->
                 letrec {
                   gfpStep :: Data.HasCacBDD.Bdd
                              -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
                     {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)> -}
                   = \ (current :: Data.HasCacBDD.Bdd) (next :: Data.HasCacBDD.Bdd) ->
                     case Data.HasCacBDD.same current next of wild {
                       GHC.Types.False -> gfpStep next (operator next)
                       GHC.Types.True -> current }
                 } in
                 gfpStep Data.HasCacBDD.top (operator Data.HasCacBDD.top)) -}
29bbfd9130ca9d6d50829625f123bd80
  ifthenelse ::
    Data.HasCacBDD.Bdd
    -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 3, Strictness: <L,1*U(U,U)><L,1*U(U,U)><L,1*U(U,U)>,
     Inline: NOINLINE -}
3a40bdd9435e48a6264755d64a923781
  imp ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <L,U>, Inline: NOINLINE -}
53b4a5cfde799cbe59d532cebdd4ec0f
  manager :: Data.HasCacBDD.XBddManager
  {- Inline: NOINLINE -}
8959aa59b5e2ce2c7f095bf11d3cf7f2
  maxVarOf :: Data.HasCacBDD.Bdd -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <L,U(U,U)> -}
b7d22b5928c4ff39e0cfd6c64c948860
  maximumvar :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 1048576#) -}
b10967f3101cdda16035fdee7fcac65d
  neg :: Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 1, Inline: NOINLINE -}
7882cf437949339fe7d814b40ff592fb
  randombdd ::
    GHC.Types.Int -> Test.QuickCheck.Gen.Gen Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Data.HasCacBDD.$wrandombdd ww1 }) -}
ec859d1df280f273055d4e9128288611
  ravel :: Data.HasCacBDD.BddTree -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S,1*U> -}
b992b946963f5e105d5aa0c0a8d0f32d
  relabel ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U)> -}
2c44610d41e96145f979382d2a874842
  restrict ::
    Data.HasCacBDD.Bdd
    -> (GHC.Types.Int, GHC.Types.Bool) -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U(1*U(U),1*U)>,
     Inline: NOINLINE -}
0c03bccb0853d5d2fde5f6d28c67c7ad
  restrictLaw ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Inline: NOINLINE -}
68761ff7517571a60d7527a305a28819
  restrictSet ::
    Data.HasCacBDD.Bdd
    -> Data.HasCacBDD.Assignment -> Data.HasCacBDD.Bdd
  {- Arity: 2, Strictness: <L,U(U,U)><L,1*U>, Inline: NOINLINE -}
7882cf437949339fe7d814b40ff592fb
  same :: Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Inline: NOINLINE -}
73ffbfe2b56a1508b28ea56c97cb2968
  satCountWith ::
    [GHC.Types.Int] -> Data.HasCacBDD.Bdd -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Types.Int]) (w1 :: Data.HasCacBDD.Bdd) ->
                 case Data.HasCacBDD.$wsatCountWith w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d575e3960ed48ffe8da0777c77cf82a1
  showInfo :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.HasCacBDD.showInfo1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
18cfd4a7872ba345fde0d1d1eaaa9661
  showInfo1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Data.HasCacBDD.manager
                        `cast`
                      (Data.HasCacBDD.N:XBddManager[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds1 ->
                 case {__pkg_ccall HasCacBDD-0.1.0.0-9yTDjY7ApZf41Py31f2KZZ XBDDManager_ShowInfo GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                        fo
                        s of wild1 { Unit# ds ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ds1
                        ds of s' { DEFAULT ->
                 (# s', GHC.Tuple.() #) } } }) -}
4e53c1bfad7d9f40f175a7c9a54c27fb
  sizeOf :: Data.HasCacBDD.Bdd -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HasCacBDD.Bdd) ->
                 case GHC.List.$wlenAcc
                        @ Data.HasCacBDD.Bdd
                        (Data.HasCacBDD.subsOf x)
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
556efbdbb7e823ecd872d5d5e5c5fee0
  subsOf :: Data.HasCacBDD.Bdd -> [Data.HasCacBDD.Bdd]
  {- Arity: 1, Strictness: <L,U(U,U)> -}
47c9b7f77119b575369e0806c207ebf7
  thenOf :: Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 1,
     Unfolding: (Data.HasCacBDD.withBDD Data.HasCacBDD.bdd_Then) -}
a2c09e1b006b67c9b9d313e6dd3d2a36
  top :: Data.HasCacBDD.Bdd
  {- Inline: NOINLINE -}
7882cf437949339fe7d814b40ff592fb
  unravel :: Data.HasCacBDD.Bdd -> Data.HasCacBDD.BddTree
  {- Arity: 1, Strictness: <L,U(U,U)> -}
4c5df56167cafd9a1a03c9a3ad9d4c30
  var :: GHC.Types.Int -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: NOINLINE -}
d66a516ba1abccc00059cd4e1c32e1ed
  withBDD ::
    Data.HasCacBDD.UnaryOp -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2,
     Strictness: <C(C(C(S(SL)))),1*C1(C1(C1(U(U,U))))><L,U(U,U)>,
     Inline: NOINLINE -}
30b761903f29888bc1bfdb6c3917962b
  xor ::
    Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd -> Data.HasCacBDD.Bdd
  {- Arity: 2, Inline: NOINLINE -}
f987a35666bb2149735240edc035e4f7
  xorSet :: [Data.HasCacBDD.Bdd] -> Data.HasCacBDD.Bdd
  {- Arity: 1, Strictness: <S,1*U>, Inline: NOINLINE -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Data.HasCacBDD.Bdd]
  = Data.HasCacBDD.$fArbitraryBdd
instance GHC.Classes.Eq [Data.HasCacBDD.Bdd]
  = Data.HasCacBDD.$fEqBdd
instance GHC.Show.Show [Data.HasCacBDD.Bdd]
  = Data.HasCacBDD.$fShowBdd
instance GHC.Show.Show [Data.HasCacBDD.BddTree]
  = Data.HasCacBDD.$fShowBddTree
"SPEC/Data.HasCacBDD $fOrdMaybe_$cmax @ Int" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                         GHC.Types.Int)
  GHC.Base.$fOrdMaybe_$cmax @ GHC.Types.Int $dOrd
  = Data.HasCacBDD.$s$fOrdMaybe_$s$fOrdMaybe_$cmax
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

